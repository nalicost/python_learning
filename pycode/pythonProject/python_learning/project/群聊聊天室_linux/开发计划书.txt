"""
                                    本次开发为简单的群聊聊天室，分为linux与windows两个版本
"""

# 开发要求
1. 网络搭建
    * 使用udp协议
2. 使用语言
    * python3
3. 实现功能
    * 建立网络连接
        客户端：直接使用udp的通用格式，同时将接受与发送分发至两个进程中完成
        服务端：直接使用udp的通用格式，所有消息都通过一个接受，处理后发送
    * 加入聊天室
        客户端：添加姓名，发送创建用户请求（死循环，不成功则不退出）
        服务端：接受客户端请求，处理请求（判断姓名是否重复），当姓名不重复时，发送通过响应并通知其他用户，并加入用户存储的数据结构中，否则发送失败
               响应
    * 退出聊天室
        客户端：发送退出请求，退出发送进程（注意使用捕获异常，防止程序中断，使得退出请求未发送）；接受服务器的退出响应，退出接收进程
        服务端：接受退出请求，处理请求，将退出请求内容转发至其他客户端，并发出退出响应，删除用户
    * 收发消息
        客户端：终端输入内容，并发送消息内容以及发送请求
        服务端：接受发送内容以及发送请求，并组织响应，发送至所有客户端
    * 管理员消息
        客户端：接受管理员信息响应
        服务端：开启新进程，创建本地的一个客户端，作为管理员发送信息，终端输入信息，并向服务端发起发送请求，经服务端组织为发送响应，转发至其他客户
               端
4. 内部协议
    * 通信协议
        请求结构：‘请求头 姓名’（加入,退出聊天室）
                ‘请求头 姓名 发送信息’(除加入，退出聊天室)
                请求头分类：
                    * L：申请加入聊天室
                    * Q：申请退出聊天室
                    * C：聊天信息发送
                    * A：管理员消息发送
        响应消息格式：
            ‘\n（发送内容）\n发送内容：’
    * 数据结构（用户存储）
        结构：散列表，字典
    * 终端ui设计（简约）
        消息显示：各占一行，‘发送内容’始终处于终端最下方
5. 具体细节
    * 分客户端，服务端开发
    * 使用fork（linux）
    * 使用multiprocessing（windows）,此次不做，由于几乎一样
    * 使用socket套接字
    * 将客户端内容处理转发，即为服务端的内容
    * 注意进程的开启与退出
    * 注意多进程中内存独立问题
    * 当前为第一版